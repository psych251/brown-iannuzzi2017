#TRUE: 471
#FALSE: 9529
471/10000
# False positive rate = .0502
R.simulations <- replicate(10000, t.test(rnorm(30, mean=0, sd=1), mu=0),
simplify=FALSE)
T.table <- table(sapply(R.simulations, "[[", "p.value") < .05)
T.table
#TRUE: 471
#FALSE: 9529
471/10000
# False positive rate = .0502
493/10000
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
ds.table <- table(sapply(ds.simulations, "[[", "p.value") < .05)
T.table <- table(sapply(ds.simulations, "[[", "p.value") < .05)
####Load Relevant Libraries and Functions
library(tidyverse)
library(knitr)
library(qualtRics)
####Import data
padata <- readSurvey("PilotBData.csv")
View(padata)
#### Data exclusion / filtering
padata <- padata %>%
filter(Finished == 1) %>%
filter(att_check == 1)
padata <- padata %>%
select(starts_with("W"),
starts_with("NW"))
padata <- padata %>%
select(-White_F1, -White_F2, -White_F3, -White_F4)
#### Prepare data for analysis - create columns etc.
padata_long <- padata %>%
gather(measure, rating, W_White:NW_CashS)
View(padata_long)
padata_long$rating <- as.numeric(padata_long$rating)
padata_long <- padata_long %>%
separate(measure,
c("image", "measure"))
padata_long <- padata_long %>%
mutate(i = row_number())
padata_spread <- padata_long %>%
spread(measure, rating)
padata_spread <- padata_spread %>%
select(-i)
View(padata_spread)
measures_combined <- cbind(padata_spread$Response, padata_spread$CashR, padata_spread$FoodR, padata_spread$CashS, padata_spread$FoodS) #combining DVs into single column
pamodel <- manova(measures_combined ~ image, data = padata_spread) #run MANOVA
#DV 1: Responsibility (general)
response.aov <- aov(Response ~ image, data = padata)
#DV 1: Responsibility (general)
response.aov <- aov(Response ~ image, data = padata_spread)
summary(response.aov)
etaSquared(response.aov)
#DV 2: Responsbility with cash assistance
cashR.aov <- aov(CashR ~ image, data = padata_spread)
summary(cashR.aov)
etaSquared(cashR.aov)
#DV 3: Responsbility with food stamps
foodR.aov <- aov(FoodR ~ image, data = padata_spread)
summary(foodR.aov)
#DV 4: Support for giving cash assistance
cashS.aov <- aov(CashS ~ image, data = padata_spread)
summary(cashS.aov)
etaSquared(cashS.aov)
#DV 5: Support for giving food stamps
foodS.aov <- aov(FoodS ~ image, data = padata_spread)
summary(foodS.aov)
install.packages("lsr")
library(lsr)
etaSquared(response.aov)
etaSquared(cashR.aov)
etaSquared(foodR.aov)
etaSquared(cashS.aov)
etaSquared(foodS.aov)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(pvalue)
}
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(pvalue)
}
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
return(pvalue)
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
T.table <- table(sapply(ds.simulations, "[[", "p.value") < .05)
return(pvalue)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(pvalue)
}
return(pvalue)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
return(pvalue)}
}
return(pvalue)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
print(pvalue)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(pvalue)
}
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
else {return(pvalue)}
i <- 1
while (i <=6) {
print(i*i)
i = i+1
}
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
}
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
return(double.sample(pvalue))
}
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
View(ds.simulations)
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations$value <= .05)
true
true <- sum(ds.simulations <= .05)
true
true/10000
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
testingsomething <- rnorm(30)
test <- t.test(testingsomething)
test
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(5000, double.sample(),
simplify=FALSE)
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(1000, double.sample(),
simplify=FALSE)
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(100, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(100, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(1000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#double sample when p < .5
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .75 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(5000, double.sample(),
simplify=FALSE)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(1000, double.sample(),
simplify=FALSE)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(500, double.sample(),
simplify=FALSE)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(100, double.sample(),
simplify=FALSE)
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(50, double.sample(),
simplify=FALSE)
fvs <- read_csv("data/FVS2011-hands.csv")
fvs_age <- fvs %>%
group_by(subid) %>%
summarise(age = mean(age))
hist_age <- ggplot(fvs_age, aes(x = age)) +
geom_histogram(color="darkblue", fill="lightblue", binwidth = 1) +
labs(x="Age (months)")
hist_age
sp <- ggplot(fvs, aes(x=age, y=hand.look)) +
geom_point(aes(colour = condition)) +
geom_smooth(aes(colour = condition)) +
labs(x="Age (Months)", y="Looking Time (Seconds)")
sp_lm <- ggplot(fvs, aes(x=age, y=hand.look)) +
geom_point(aes(colour = condition)) +
geom_smooth(aes(colour = condition), method = "lm") +
labs(x="Age (Months)", y="Looking Time (Seconds)")
sp_lm
library(tidyverse)
N.Sim <- 10000
p.values <- rep(NA, N.Sim)
for(i in 1:N.Sim) {
d <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(d)
Current.p.value <- Test$p.value
p.values[i] <- Current.p.value}
p.values.sig <- p.values <= .05 | p.values >=.995
N.Sim <- 10000
p.values <- rep(NA, N.Sim)
for(i in 1:N.Sim) {
d <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(d)
Current.p.value <- Test$p.value
p.values[i] <- Current.p.value}
p.values.sig <- p.values <= .05
p.values.sig
R.simulations <- replicate(10000, t.test(rnorm(30, mean=0, sd=1), mu=0),
simplify=FALSE)
T.table <- table(sapply(R.simulations, "[[", "p.value") < .05)
T.table
#TRUE: 493
#FALSE: 9507
493/10000
# False positive rate = .0493
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .25 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#false-positive rate: .0851
#double sample when p < .5 & p > .05
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#false-positive rate = .1274
#double sample when p < .75 & p > .05
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .75 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#false-positive rate = .1828
#double sample when p > .05
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(50, double.sample(),
simplify=FALSE)
library(tidyverse)
library(tidyr)
library(dplyr)
library(readr)
