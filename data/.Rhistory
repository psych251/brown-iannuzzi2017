sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
d %>%
filter(trial_type == "unequal")
d %>%
filter(trial_type == "Unequal")
d %>%
mutate(decision_tf = decision == "accept")
d %>%
filter(trial_type == "Unequal") %>%
group_by(country, actor.age.years) %>%
summarise(decision_tf)
d <- d %>%
mutate(decision_tf = decision == "accept")
d %>%
filter(trial_type == "Unequal") %>%
group_by(country, actor.age.years) %>%
summarise(decision_tf)
d %>%
filter(trial_type == "Unequal") %>%
group_by(country, actor.age.years) %>%
summarise(decision_mean = mean(decision_tf))
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
hist(d$actor.age.years)
d <- d %>%
group_by(d$country) %>%
summarise(age_country = mean(actor.age.years)) %>%
hist(d$age_country)
d_analyze <- d %>%
ifelse(decision == "accept", 1, 0)
d_analyze <- d %>%
ifelse(decision == "accept", 1)
d_analyze <- d %>%
ifelse(decision == "accept", 1, 0)
d_analyze <-
ifelse(d$decision == "accept", 1, 0)
view(d_analyze)
d_analyze <- d %>%
mutate(ifelse(d$decision == "accept", 1, 0))
View(d_analyze)
d_analyze <- d %>%
mutate(decision_new = ifelse(d$decision == "accept", 1, 0))
library(tidyverse)
fvs <- read_csv("data/FVS2011-hands.csv")
#double sample when p < .5 & p > .05
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .5 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#false-positive rate = .1274
#double sample when p < .75 & p > .05
double.sample <- function(){
dnew <- rnorm(30, mean = 0, sd = 1)
Test <- t.test(dnew)
pvalue <- Test$p.value
while(pvalue <= .75 && pvalue >= .05){
dnew <- c(dnew, rnorm(30))
pvalue <- t.test(dnew)$p.value
}
print(pvalue)
}
ds.simulations <- replicate(10000, double.sample(),
simplify=FALSE)
true <- sum(ds.simulations <= .05)
true/10000
#false-positive rate = .1828
getwd
getwd()
library(tidyverse)
library(knitr)
library(qualtRics)
library(lsr)
knitr::opts_chunk$set(root.dir = '/Users/admin/Documents/PSYCH251/brown-iannuzzi2017/data')
getwd()
knitr::opts_knit$set(root.dir = '/Users/admin/Documents/PSYCH251/brown-iannuzzi2017/data')
getwd()
setwd("/Users/admin/Documents/PSYCH251/brown-iannuzzi2017/data")
getwd()
knitr::opts_knit$set(root.dir = 'Documents/PSYCH251/brown-iannuzzi2017/data')
getwd()
getwd()
####Import data
padata <- readSurvey("PilotBData.csv")
padata <- padata %>%
filter(Finished == 1) %>%
filter(att_check == 1)
padata <- padata %>%
select(starts_with("W"),
starts_with("NW"))
padata <- padata %>%
select(-White_F1, -White_F2, -White_F3, -White_F4)
padata_long <- padata %>%
gather(measure, rating, W_White:NW_CashS)
View(padata_long)
padata_long$rating <- as.numeric(padata_long$rating)
padata_long <- padata_long %>%
separate(measure,
c("image", "measure"))
padata_long <- padata_long %>%
mutate(i = row_number())
padata_spread <- padata_long %>%
spread(measure, rating)
padata_spread <- padata_spread %>%
select(-i)
View(padata_spread)
padata_spread$image <- as.factor(padata_spread$image)
measures_combined <- cbind(padata_spread$Response, padata_spread$CashR, padata_spread$FoodR, padata_spread$CashS, padata_spread$FoodS) #combining DVs into single column
pamodel <- manova(measures_combined ~ image, data = padata_spread) #run MANOVA
pamodel <- manova(measures_combined ~ image, data = padata_spread, na.omit = FALSE) #run MANOVA
####Import data
padata <- readSurvey("PilotBData.csv")
padata <- padata %>%
filter(Finished == 1) %>%
filter(att_check == 1)
padata <- padata %>%
select(starts_with("W"),
starts_with("NW"))
padata <- padata %>%
select(-White_F1, -White_F2, -White_F3, -White_F4)
#### Prepare data for analysis - create columns etc.
padata_long <- padata %>%
gather(measure, rating, W_White:NW_CashS)
padata_long <- padata_long %>%
separate(measure,
c("image", "measure"))
padata_new <- padata_long %>%
spread(key=measure, value = rating)
padata_long <- padata_long %>%
mutate(i = row_number())
padata_spread <- padata_long %>%
spread(measure, rating)
#### Prepare data for analysis - create columns etc.
padata <- padata %>%
mutate(subid = row_number())
padata_long <- padata %>%
gather(measure, rating, W_White:NW_CashS)
padata_long$rating <- as.numeric(padata_long$rating)
padata_long <- padata_long %>%
separate(measure,
c("image", "measure"))
padata_spread <- padata_long %>%
spread(measure, rating)
padata_spread$image <- as.factor(padata_spread$image)
pamodel <- manova(measures_combined ~ image, data = padata_spread) #run MANOVA
measures_combined <- cbind(padata_spread$Response, padata_spread$CashR, padata_spread$FoodR, padata_spread$CashS, padata_spread$FoodS) #combining DVs into single column
pamodel <- manova(measures_combined ~ image, data = padata_spread) #run MANOVA
summary(pamodel) #view MANOVA to determine significance
measures_combined <- cbind(padata_spread$Response, padata_spread$CashR, padata_spread$FoodR, padata_spread$CashS, padata_spread$FoodS) #combining DVs into single column
pamodel <- manova(measures_combined ~ image, data = padata_spread) #run MANOVA
summary(pamodel) #view MANOVA to determine significance
####Load Relevant Libraries and Functions
library(tidyverse)
library(knitr)
library(qualtRics)
library(lsr)
####Import data
padata <- readSurvey("PilotBData.csv")
View(padata)
#### Data exclusion / filtering
padata <- padata %>%
filter(Finished == 1) %>%
filter(att_check == 1)
padata <- padata %>%
select(starts_with("W"),
starts_with("NW"))
padata <- padata %>%
select(-White_F1, -White_F2, -White_F3, -White_F4)
#### Prepare data for analysis - create columns etc.
padata <- padata %>%
mutate(subid = row_number())
padata_long <- padata %>%
gather(measure, rating, W_White:NW_CashS)
View(padata_long)
padata_long$rating <- as.numeric(padata_long$rating)
padata_long <- padata_long %>%
separate(measure,
c("image", "measure"))
padata_spread <- padata_long %>%
spread(measure, rating)
View(padata_spread)
padata_spread$image <- as.factor(padata_spread$image)
measures_combined <- cbind(padata_spread$Response, padata_spread$CashR, padata_spread$FoodR, padata_spread$CashS, padata_spread$FoodS) #combining DVs into single column
pamodel <- manova(measures_combined ~ image, data = padata_spread) #run MANOVA
summary(pamodel) #view MANOVA to determine significance
#DV 1: Responsibility (general)
response.aov <- aov(Response ~ image, data = padata_spread)
summary(response.aov)
etaSquared(response.aov)
#DV 2: Responsbility with cash assistance
cashR.aov <- aov(CashR ~ image, data = padata_spread)
summary(cashR.aov)
etaSquared(cashR.aov)
#DV 3: Responsbility with food stamps
foodR.aov <- aov(FoodR ~ image, data = padata_spread)
summary(foodR.aov)
etaSquared(foodR.aov)
#DV 4: Support for giving cash assistance
cashS.aov <- aov(CashS ~ image, data = padata_spread)
summary(cashS.aov)
etaSquared(cashS.aov)
#DV 5: Support for giving food stamps
foodS.aov <- aov(FoodS ~ image, data = padata_spread)
summary(foodS.aov)
etaSquared(foodS.aov)
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR))
means
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
View(means)
meanplot <- ggplot(means, aes(x=mean_CashR, y=image)) +
geom_point()
meanplot
meanplot <- ggplot(means, aes(x=mean_CashR, y=image), aes(x=mean_CashS, y=image)) +
geom_point()
meanplot
means <- means %>%
gather(measure, image, mean_CashR, mean_CashS, mean_FoodR, mean_FoodS, mean_Hardwork, mean_Response, mean_Smart, mean_White)
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
t(means)
means <- t(means)
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means <- setNames(data.frame(t(means[,-1])), means[,1])
meanplot <- ggplot(means, aes(x="column 0", ymin="column 1", ymax="column 2")) +
geom_point()
meanplot
meanplot <- ggplot(means, aes(x="column 0", y="column 1", y="column 2")) +
geom_point()
meanplot <- ggplot(means, aes(x="column 0", y="column 1")) +
geom_point()
meanplot
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means <- t(means)
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means_t <- t(means)
colnames(means_t) <- rownames(means)
means_t
View(means_t)
colnames(means_t) <- "NW", "W"
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means_t <- t(means)
colnames(means_t) = means_t[1, ] # the first row will be the header
means_t = means_t[-1, ]
means_t <- t(means)
colnames(means_t) = means_t[1, ] # the first row will be the header
means_t <- colnames(means_t) = means_t[1, ] # the first row will be the header
colnames(means_t) = means_t[1, ] # the first row will be the header
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means_t <- t(means, header=TRUE)
colnames(means_t) <- c("NW", "W")
means_t
means_t <- t(means) %>%
colnames(c("NW", "W"))
means_t <- as.data.frame(means_t)
colnames(means_t) <- c("NW", "W")
means_t = means_t[-1, ]
means_t[,c(2, 1)]
means_t <- means_t[,c(2, 1)]
meanplot <- ggplot(means_t, aes(x="column 0", y="W")) +
geom_point()
meanplot
means_t <- means_t %>%
mutate(DV = c("CashR", "CashS", "FoodR", "FoodS", "Hardwork", "Response", "Smart", "White"))
ggplot(means_t, aes(DV, W)) +
geom_linerange(
aes(x = cut, ymin = 0, ymax = 7, group = color),
color = "lightgray", size = 1.5,
position = position_dodge(0.3)
)+
geom_point(
aes(color = "NW"),
position = position_dodge(0.3), size = 3
)+
scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
theme_pubclean()
ggplot(means_t, aes(DV, W)) +
geom_linerange(
aes(x = cut, ymin = 0, ymax = 7, group = color),
color = "lightgray", size = 1.5,
position = position_dodge(0.3)
)+
geom_point(
aes(color = "NW"),
position = position_dodge(0.3), size = 3
)+
scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))
ggplot(means_t, aes(DV, W)) +
geom_linerange(
aes(x = cut, ymin = 0, ymax = 7, group = "W", "NW"),
color = "lightgray", size = 1.5,
position = position_dodge(0.3)
)+
geom_point(
aes(color = "NW"),
position = position_dodge(0.3), size = 3
)+
scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))
ggplot(means_t, aes(DV, W)) +
geom_linerange(
aes(x = W, ymin = 0, ymax = 7, group = "W", "NW"),
color = "lightgray", size = 1.5,
position = position_dodge(0.3)
)+
geom_point(
aes(color = "NW"),
position = position_dodge(0.3), size = 3
)+
scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))
mdplot(means_t, columns=c(1,2), xlab="Mean", ylab="Difference", main=NULL, ...)
install.packages("limma")
means_t <- means_t %>%
gather(image, DV, W, NW)
means_t <- t(means)
means_t <- as.data.frame(means_t)
colnames(means_t) <- c("NW", "W")
means_t = means_t[-1, ]
means_t <- means_t[,c(2, 1)]
means_t <- means_t %>%
mutate(DV = c("CashR", "CashS", "FoodR", "FoodS", "Hardwork", "Response", "Smart", "White"))
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means_t <- t(means)
means_t <- as.data.frame(means_t)
colnames(means_t) <- c("NW", "W")
means_t = means_t[-1, ]
means_t <- means_t[,c(2, 1)]
means_t <- means_t %>%
mutate(DV = c("CashR", "CashS", "FoodR", "FoodS", "Hardwork", "Response", "Smart", "White"))
library(tidyverse)
library(DT) # dependency
library(ggthemes) # dependency
library(wordbankr)
library(purrr)
library(shiny)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
sklar <- read_csv("data/sklar_data.csv")
head(sklar)
sgf_wide <- sgf %>%
spread(item, correct)
sgf <- read_csv("data/stiller_scales_data.csv")
sgf
sgf_wide <- sgf %>%
spread(item, correct)
head(sgf_wide)
sgf_long <- sgf_wide %>%
gather(item, correct, beds, faces, houses, pasta)
head(sgf_long)
means_t <- means_t %>%
gather(image, mean, W, NW)
ggplot(means_t, aes(DV, mean)) +
geom_point(color=image)
ggplot(means_t, aes(DV, mean)) +
geom_point(image=color)
ggplot(means_t, aes(DV, mean)) +
geom_point(aes(color=image))
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image))
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image), size = 3)
str(means_t)
as.numeric(means_t$mean)
str(means_t)
means_t <- as.numeric(means_t$mean)
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image), size = 3)
str(means_t)
means <- padata_spread %>%
group_by(image) %>%
summarise(mean_CashR = mean(CashR),
mean_CashS = mean(CashS),
mean_FoodR = mean(FoodR),
mean_FoodS = mean(FoodS),
mean_Hardwork = mean(Hardwork),
mean_Response = mean(Response),
mean_Smart = mean(Smart),
mean_White = mean(White))
means_t <- t(means)
means_t <- as.data.frame(means_t)
colnames(means_t) <- c("NW", "W")
means_t = means_t[-1, ]
means_t <- means_t[,c(2, 1)]
means_t <- means_t %>%
mutate(DV = c("CashR", "CashS", "FoodR", "FoodS", "Hardwork", "Response", "Smart", "White"))
means_t <- means_t %>%
gather(image, mean, W, NW)
means_t$mean <- as.numeric(as.character(means_t$mean))
str(means_t)
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image), size = 3)
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image), size = 3) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image), size = 3) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
legend.text = element_text(size=14))
ggplot(means_t, aes(mean, DV)) +
geom_point(aes(color=image), size = 3) +
theme(axis.text=element_text(size=14, face="bold"),
axis.title=element_text(size=14,face="bold"),
legend.text = element_text(size=14))
